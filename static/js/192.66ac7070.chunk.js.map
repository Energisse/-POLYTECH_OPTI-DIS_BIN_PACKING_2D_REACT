{"version":3,"file":"static/js/192.66ac7070.chunk.js","mappings":"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","sources":["../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/Item.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/bin.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/binPacking.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/dataSet.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/index.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/metaheuristique/genetique.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/metaheuristique/hillClimbing.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/metaheuristique/metaheuristique.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/metaheuristique/recuitSimule.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/metaheuristique/tabou.js","../node_modules/polytech_opti-dis_bin_packing_2d/dist/src/rectangle.js","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","utils/worker.ts"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rectangle_1 = __importDefault(require(\"./rectangle\"));\nclass Item extends rectangle_1.default {\n    constructor(id, width, height) {\n        super(width, height);\n        this.id = id;\n    }\n    rotate() {\n        [this.width, this.height] = [this.height, this.width];\n    }\n    copy() {\n        return new Item(this.id, this.width, this.height);\n    }\n}\nexports.default = Item;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rectangle_1 = __importDefault(require(\"./rectangle\"));\nclass Bin extends rectangle_1.default {\n    constructor(width, height, x = 0, y = 0) {\n        super(width, height);\n        this._item = null;\n        this._items = [];\n        this._fitness = 0;\n        this.bottomSubBin = null;\n        this.rightSubBin = null;\n        this.divided = false;\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Add an item to the bin\n     * @param item the item to add\n     */\n    addItem(item) {\n        const result = (() => {\n            if (item.width > this.width || item.height > this.height)\n                return false;\n            if (item.area > this.area - (this._item?.area || 0))\n                return false;\n            if (this._item == null) {\n                this._item = item;\n                return true;\n            }\n            if (this.rightSubBin == null)\n                this.rightSubBin = new Bin(this.width - this._item.width, this.height, this.x + this._item.width, this.y);\n            if (this.bottomSubBin == null)\n                this.bottomSubBin = new Bin(this._item.width, this.height - this._item.height, this.x, this.y + this._item.height);\n            if (this.rightSubBin.addItem(item))\n                return true;\n            if (this.bottomSubBin.addItem(item))\n                return true;\n            function getDeepestY(bin) {\n                let max = bin.y + (bin.item?.height || 0);\n                for (const subBin of bin.subBins) {\n                    max = Math.max(max, getDeepestY(subBin));\n                }\n                return max;\n            }\n            const newHeight = Math.max(this._item.height, getDeepestY(this.rightSubBin));\n            const newBottomBin = new Bin(this.width, this.height - newHeight, this.x, this.y + newHeight);\n            for (const item of this.bottomSubBin.items) {\n                if (!newBottomBin.addItem(item)) {\n                    return false;\n                }\n            }\n            if (newBottomBin.addItem(item)) {\n                const newRightBin = new Bin(this.width - this._item.width, newHeight, this.x + this._item.width, this.y);\n                for (const item of this.rightSubBin.items) {\n                    if (!newRightBin.addItem(item)) {\n                        return false;\n                    }\n                }\n                this.bottomSubBin = newBottomBin;\n                this.rightSubBin = newRightBin;\n                return true;\n            }\n            return false;\n        })();\n        if (result) {\n            this._items.push(item);\n            this._fitness += item.area;\n        }\n        return result;\n    }\n    get item() {\n        return this._item;\n    }\n    get fitness() {\n        return this._fitness;\n    }\n    get items() {\n        return this._items;\n    }\n    get subBins() {\n        return [this.rightSubBin, this.bottomSubBin].filter(bin => bin != null);\n    }\n    copy() {\n        const bin = new Bin(this.width, this.height, this.x, this.y);\n        bin._item = this._item?.copy() || null;\n        bin.divided = this.divided;\n        bin.bottomSubBin = this.bottomSubBin?.copy() || null;\n        bin.rightSubBin = this.rightSubBin?.copy() || null;\n        return bin;\n    }\n    isEmtpy() {\n        if (this._item != null)\n            return false;\n        if (this.rightSubBin != null && !this.rightSubBin.isEmtpy())\n            return false;\n        if (this.bottomSubBin != null && !this.bottomSubBin.isEmtpy())\n            return false;\n        return true;\n    }\n}\nexports.default = Bin;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bin_1 = __importDefault(require(\"./bin\"));\nclass BinPacking {\n    constructor(binWidth, binHeight, items) {\n        this.bins = [];\n        this._items = [];\n        this.binWidth = binWidth;\n        this.binHeight = binHeight;\n        this.bins = [new bin_1.default(binWidth, binHeight)];\n        items.forEach(item => {\n            if (this.bins.at(-1).addItem(item)) {\n                return;\n            }\n            const bin = new bin_1.default(binWidth, binHeight);\n            bin.addItem(item);\n            this.bins.push(bin);\n        });\n        this._items = items;\n    }\n    get items() {\n        return this._items;\n    }\n    get fitness() {\n        return this.bins.reduce((acc, bin) => acc + Math.pow(bin.fitness, 2), 0);\n    }\n}\nexports.default = BinPacking;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Item_1 = __importDefault(require(\"./Item\"));\nconst binPacking_1 = __importDefault(require(\"./binPacking\"));\n/**\n * Class representing a dataset for the bin packing problem.\n */\nclass DataSet {\n    /**\n     * Creates a new instance of DataSet.\n     * @param content : raw conten\n     * exemple :\n     * Name: test\n     * Comment: test\n     * NbItems: 3\n     * BinWidth: 250\n     * BinHeight: 250*\n     *\n     * Items [id width height]:\n     * 1 167 184\n     * 2 114 118\n     * 3 167 152\n     */\n    constructor(content) {\n        const [name, comment, nbItems, binWidth, binHeight, , , ...stringItems] = content.replace(/[^:|\\n]*: /g, \"\").replace(/\\r/g, \"\").split(\"\\n\");\n        this.name = name;\n        this.comment = comment;\n        this.nbItems = +nbItems;\n        this.binWidth = +binWidth;\n        this.binHeight = +binHeight;\n        this.items = stringItems.map(item => {\n            const [id, width, height] = item.split(\" \").map(Number);\n            return new Item_1.default(id, width, height);\n        });\n        if (this.items.length != +nbItems)\n            throw new Error(\"Number of items does not match\");\n    }\n    /**\n     * Gets the minimum number of bins needed to store all the items.\n     * @returns The minimum number of bins needed.\n     */\n    get minBinAmount() {\n        return Math.ceil(this.items.reduce((acc, item) => acc + item.area, 0) / (this.binWidth * this.binHeight));\n    }\n    /**\n     * Creates a bin packing from the dataset.\n     * @returns The created bin packing.\n     */\n    createBinPacking() {\n        return new binPacking_1.default(this.binWidth, this.binHeight, this.items);\n    }\n    /**\n     * Creates a random solution for the bin packing problem.\n     * @returns The randomly created solution.\n     */\n    createRandomSolution() {\n        return new binPacking_1.default(this.binWidth, this.binHeight, [...this.items].sort(() => Math.random() - 0.5));\n    }\n}\nexports.default = DataSet;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BinPacking = exports.DataSet = exports.HillClimbing = exports.RecuitSimule = exports.Genetique = exports.Tabou = exports.Metaheuristique = void 0;\nconst metaheuristique_1 = __importDefault(require(\"./metaheuristique/metaheuristique\"));\nexports.Metaheuristique = metaheuristique_1.default;\nconst tabou_1 = __importDefault(require(\"./metaheuristique/tabou\"));\nexports.Tabou = tabou_1.default;\nconst genetique_1 = __importDefault(require(\"./metaheuristique/genetique\"));\nexports.Genetique = genetique_1.default;\nconst recuitSimule_1 = __importDefault(require(\"./metaheuristique/recuitSimule\"));\nexports.RecuitSimule = recuitSimule_1.default;\nconst hillClimbing_1 = __importDefault(require(\"./metaheuristique/hillClimbing\"));\nexports.HillClimbing = hillClimbing_1.default;\nconst dataSet_1 = __importDefault(require(\"./dataSet\"));\nexports.DataSet = dataSet_1.default;\nconst binPacking_1 = __importDefault(require(\"./binPacking\"));\nexports.BinPacking = binPacking_1.default;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst binPacking_1 = __importDefault(require(\"../binPacking\"));\nconst metaheuristique_1 = __importDefault(require(\"./metaheuristique\"));\n/**\n * Represents a genetic algorithm for bin packing optimization.\n */\nclass Genetique extends metaheuristique_1.default {\n    /**\n     * Creates a new instance of the Genetique class.\n     * @param dataSet The dataset used for bin packing.\n     * @param config The configuration options for the Genetique algorithm.\n     */\n    constructor(dataSet, config) {\n        super(dataSet, {\n            convergence: 10,\n            iteration: dataSet.items.length ** 2,\n            populationSize: 20,\n            ...config\n        });\n        this.generation = [];\n        this.newGeneration = [];\n    }\n    /**\n     * Generates the initial population of solutions.\n     */\n    generatePopulation() {\n        while (this.generation.length < this.config.populationSize) {\n            this.generation.push(this.dataSet.createRandomSolution());\n        }\n    }\n    /**\n     * Computes the fitness of each individual in the population.\n     * Fitness is calculated as the sum of the squared used spaces in each bin.\n     * The higher the fitness, the more filled a bin is.\n     * The more evenly the used space is distributed, the lower the fitness.\n     */\n    computeFitness() {\n        const fitness = this.generation.map(individual => ({\n            individual,\n            fitness: individual.fitness\n        }));\n        fitness.sort((a, b) => b.fitness - a.fitness);\n        this.generation = fitness.map(fit => fit.individual);\n    }\n    /**\n     * Performs crossover between individuals in the population to create a new generation.\n     */\n    crossover() {\n        this.newGeneration = [this.generation[0]];\n        for (let i = 1; i < this.config.populationSize / 2; i++) {\n            const parent1 = this.generation[i - 1];\n            const parent2 = this.generation[i];\n            const items1 = parent1.items;\n            const items2 = parent2.items;\n            const index1 = Math.floor(Math.random() * items1.length);\n            const index2 = Math.floor(Math.random() * items1.length);\n            const start = Math.min(index1, index2);\n            const end = Math.max(index1, index2);\n            const delta = end - start;\n            const removed = items1.slice(start, delta).map(item => item.copy());\n            const filtered = items2.filter(item => !removed.find(({ id }) => id === item.id));\n            filtered.splice(start, 0, ...removed);\n            this.newGeneration.push(new binPacking_1.default(this.dataSet.binWidth, this.dataSet.binHeight, filtered));\n        }\n    }\n    /**\n     * Performs mutation on the new generation of individuals.\n     * Mutation randomly modifies the order of items in each individual.\n     */\n    mutate() {\n        for (let i = 1; i < this.newGeneration.length; i++) {\n            const items = this.newGeneration[i].items;\n            for (let index = 0; index < items.length; index++) {\n                if (Math.random() > 0.1)\n                    continue;\n                const itemToMove = items.splice(index, 1)[0].copy();\n                itemToMove.rotate();\n                const index2 = Math.floor(Math.random() * items.length);\n                items.splice(index2, 0, itemToMove);\n            }\n            this.newGeneration[i] = new binPacking_1.default(this.dataSet.binWidth, this.dataSet.binHeight, items);\n        }\n    }\n    /**\n     * Initializes the generator for the Genetique algorithm.\n     * @returns A generator that yields the current solution and iteration number.\n     */\n    *initGenerator() {\n        for (let i = 1; i <= this.config.iteration; i++) {\n            this.generatePopulation(); // Generate population if this population size changes by the config while running\n            this.computeFitness();\n            this.crossover();\n            this.mutate();\n            this.generation = this.newGeneration;\n            this.generatePopulation();\n            yield {\n                solution: this.generation,\n                iteration: i\n            };\n        }\n    }\n    /**\n     * Gets the current population of bin packing solutions.\n     * @returns An array of BinPacking objects representing the population.\n     */\n    getPopulation() {\n        return this.generation;\n    }\n    /**\n     * Gets the best solution from the current population.\n     * @returns The best BinPacking solution.\n     */\n    get solution() {\n        return this.generation[0];\n    }\n}\nexports.default = Genetique;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst binPacking_1 = __importDefault(require(\"../binPacking\"));\nconst metaheuristique_1 = __importDefault(require(\"./metaheuristique\"));\nclass HillClimbing extends metaheuristique_1.default {\n    /**\n     * Creates an instance of HillClimbing.\n     * @param {DataSet} dataSet - The data set for the problem.\n     * @param {HillClimbingConfig} [config] - The configuration options for the HillClimbing algorithm.\n     */\n    constructor(dataSet, config) {\n        super(dataSet, {\n            convergence: 0,\n            ...config\n        });\n        this.bestSolution = this.dataSet.createRandomSolution();\n    }\n    /**\n     * Initializes the generator for the Genetique algorithm.\n     * @returns A generator that yields the current solution and iteration number.\n     */\n    *initGenerator() {\n        let bestFitness = this.bestSolution.fitness;\n        let iteration = 1;\n        while (true) {\n            const neighbor = this.getBestNeighbors();\n            if (neighbor.fitness <= bestFitness)\n                break;\n            this.bestSolution = neighbor.solution;\n            bestFitness = neighbor.fitness;\n            yield {\n                solution: [this.bestSolution],\n                iteration: iteration++\n            };\n        }\n    }\n    /**\n     * Gets the best neighbors for the HillClimbing algorithm.\n     * @returns The best neighbors.\n     */\n    getBestNeighbors() {\n        const items = this.bestSolution.items;\n        let bestSolution;\n        let bestFitness = 0;\n        for (let i = 0; i < items.length; i++) {\n            for (let j = 0; j < items.length; j++) {\n                if (i === j) {\n                    continue;\n                }\n                const neighborItems = items.map(item => item.copy());\n                neighborItems[i].rotate();\n                neighborItems.splice(j, 0, neighborItems.splice(i, 1)[0]);\n                const solution = new binPacking_1.default(this.dataSet.binWidth, this.dataSet.binHeight, neighborItems);\n                if (solution.fitness > bestFitness) {\n                    bestSolution = solution;\n                    bestFitness = solution.fitness;\n                }\n            }\n        }\n        return {\n            solution: bestSolution,\n            fitness: bestFitness\n        };\n    }\n    /**\n     * Gets the best solution from the HillClimbing algorithm.\n     * @returns The best BinPacking solution.\n     */\n    get solution() {\n        return this.bestSolution;\n    }\n}\nexports.default = HillClimbing;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Metaheuristique {\n    constructor(dataSet, config) {\n        this.lastFitness = 0;\n        this.dataSet = dataSet;\n        this._config = config;\n        this.generator = this.convergenceGenerator();\n    }\n    /**\n     * Runs the algorithm.\n     * @returns The generator.\n     */\n    run() {\n        return this.generator.next();\n    }\n    *convergenceGenerator() {\n        const generator = this.initGenerator();\n        let convergenceCounter = 0;\n        for (const { solution, iteration } of generator) {\n            if (this._config.convergence !== 0) {\n                if (this.lastFitness >= solution[0].fitness) {\n                    convergenceCounter++;\n                    if (convergenceCounter >= this._config.convergence) {\n                        generator.return();\n                    }\n                }\n                else {\n                    this.lastFitness = this.fitness;\n                    convergenceCounter = 0;\n                }\n            }\n            yield { solution, iteration };\n        }\n    }\n    /**\n     * The iterator for the algorithm.\n     * @returns The iterator.\n     */\n    [Symbol.iterator]() {\n        return this.generator;\n    }\n    /**\n     * The configuration options for the algorithm.\n     * @returns The configuration options.\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * Sets the configuration options for the algorithm.\n     * @param config The configuration options.\n     */\n    set config(config) {\n        this._config = {\n            ...this._config,\n            ...config\n        };\n    }\n    /**\n     * The number of bins in the solution.\n     * @returns The number of bins.\n     */\n    get numberOfBins() {\n        return this.solution.bins.length;\n    }\n    /**\n     * The fitness of the solution.\n     * @returns The fitness.\n     */\n    get fitness() {\n        return this.solution.fitness;\n    }\n}\nexports.default = Metaheuristique;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst binPacking_1 = __importDefault(require(\"../binPacking\"));\nconst metaheuristique_1 = __importDefault(require(\"./metaheuristique\"));\nclass RecuitSimule extends metaheuristique_1.default {\n    /**\n     * Creates an instance of RecuitSimule.\n     * @param {DataSet} dataSet - The data set for the problem.\n     * @param {RecuitSimuleConfig} [config] - The configuration options for the RecuitSimule algorithm.\n     */\n    constructor(dataSet, config) {\n        super(dataSet, {\n            convergence: 10,\n            iteration: dataSet.items.length,\n            iterationByTemperature: dataSet.items.length,\n            temperatureDecrease: 0.8,\n            temperature: 1,\n            ...config\n        });\n        this.bestSolution = this.dataSet.createRandomSolution();\n        this.bestFitness = this.bestSolution.fitness;\n        this.temperature = this.config.temperature;\n    }\n    /**\n     * Initializes the generator for the Genetique algorithm.\n     * @returns A generator that yields the current solution and iteration number.\n     */\n    *initGenerator() {\n        let currentFitness = this.bestSolution.fitness;\n        let currentSolution = this.bestSolution;\n        let totalIteration = 1;\n        for (let i = 1; i <= this.config.iteration; i++) {\n            for (let j = 1; j <= this.config.iterationByTemperature; j++) {\n                const neighbor = this.getRandomNeighboor();\n                const fitness = neighbor.fitness;\n                if (fitness >= currentFitness) {\n                    currentSolution = neighbor;\n                    currentFitness = fitness;\n                    if (currentFitness > this.bestFitness) {\n                        this.bestSolution = currentSolution;\n                        this.bestFitness = currentFitness;\n                    }\n                }\n                else {\n                    const rand = Math.random();\n                    if (rand < Math.exp((fitness - currentFitness) / this.temperature)) {\n                        currentSolution = neighbor;\n                    }\n                }\n                yield {\n                    solution: [currentSolution],\n                    iteration: totalIteration++\n                };\n            }\n            this.temperature *= this.config.temperatureDecrease;\n        }\n    }\n    /**\n     * Gets random neighbor for the RecuitSimule algorithm.\n     * @returns {BinPacking} - The random neighbor.\n     */\n    getRandomNeighboor() {\n        const items = this.bestSolution.items;\n        while (true) {\n            const i = Math.floor(Math.random() * items.length);\n            const j = Math.floor(Math.random() * items.length);\n            if (i === j)\n                continue;\n            const neighborItems = items.map(item => item.copy());\n            neighborItems[i].rotate();\n            neighborItems.splice(j, 0, neighborItems.splice(i, 1)[0]);\n            return new binPacking_1.default(this.dataSet.binWidth, this.dataSet.binHeight, neighborItems);\n        }\n    }\n    /**\n     * Gets the best solution from the HillClimbing algorithm.\n     * @returns The best BinPacking solution.\n     */\n    get solution() {\n        return this.bestSolution;\n    }\n}\nexports.default = RecuitSimule;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst binPacking_1 = __importDefault(require(\"../binPacking\"));\nconst metaheuristique_1 = __importDefault(require(\"./metaheuristique\"));\nclass Tabou extends metaheuristique_1.default {\n    /**\n     * Creates an instance of Tabu.\n     * @param {DataSet} dataSet - The data set for the problem.\n     * @param {TabouConfig} [config] - The configuration options for the Tabou algorithm.\n     */\n    constructor(dataSet, config) {\n        super(dataSet, {\n            convergence: 10,\n            iteration: dataSet.items.length ** 2,\n            tabouSize: dataSet.items.length / 2,\n            ...config\n        });\n        this.tabou = [];\n        this.bestSolution = this.dataSet.createRandomSolution();\n        this.tabou = [];\n    }\n    /**\n     * Initializes the generator for the Genetique algorithm.\n     * @returns A generator that yields the current solution and iteration number.\n     */\n    *initGenerator() {\n        let bestFitness = this.bestSolution.fitness;\n        for (let i = 1; i <= this.config.iteration; i++) {\n            const neighbor = this.getBestNeighbors();\n            if (neighbor.fitness <= bestFitness) {\n                this.tabou.push({ src: neighbor.src, dest: neighbor.dest });\n                if (this.tabou.length > this.config.tabouSize) {\n                    this.tabou.shift();\n                }\n            }\n            this.bestSolution = neighbor.solution;\n            bestFitness = neighbor.fitness;\n            yield {\n                solution: [this.bestSolution],\n                iteration: i\n            };\n        }\n    }\n    /**\n     * Gets the best neighbors for the Tabu algorithm.\n     * @returns {Object} - The best neighbors.\n     */\n    getBestNeighbors() {\n        const items = this.bestSolution.items;\n        let src = 0;\n        let dest = 0;\n        let bestSolution;\n        let bestFitness = 0;\n        for (let i = 0; i < items.length; i++) {\n            for (let j = 0; j < items.length; j++) {\n                if (i === j) {\n                    continue;\n                }\n                if (this.tabou.some(tabu => tabu.src === i && tabu.dest === j))\n                    continue;\n                const neighborItems = items.map(item => item.copy());\n                neighborItems[i].rotate();\n                neighborItems.splice(j, 0, neighborItems.splice(i, 1)[0]);\n                const solution = new binPacking_1.default(this.dataSet.binWidth, this.dataSet.binHeight, neighborItems);\n                if (solution.fitness > bestFitness) {\n                    src = i;\n                    dest = j;\n                    bestSolution = solution;\n                    bestFitness = solution.fitness;\n                }\n            }\n        }\n        return {\n            dest,\n            src,\n            solution: bestSolution,\n            fitness: bestFitness\n        };\n    }\n    /**\n     * Gets the best solution from the HillClimbing algorithm.\n     * @returns The best BinPacking solution.\n     */\n    get solution() {\n        return this.bestSolution;\n    }\n}\nexports.default = Tabou;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Rectangle {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    get area() {\n        return this.width * this.height;\n    }\n}\nexports.default = Rectangle;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { DataSet, Genetique, HillClimbing, Metaheuristique, RecuitSimule, Tabou } from \"polytech_opti-dis_bin_packing_2d\";\r\nimport Bin from \"polytech_opti-dis_bin_packing_2d/dist/src/bin\";\r\nimport { BinPackingSvgs, MetaheuristiqueStatistic } from \"../reducers/metaheuristique\";\r\ndeclare var self: DedicatedWorkerGlobalScope;\r\n\r\ntype MetaheuristiqueState = {\r\n    binPakings: {\r\n        binPacking: Array<{\r\n            bins: Array<{\r\n                x: number;\r\n                y: number;\r\n                width: number;\r\n                height: number;\r\n                id: string;\r\n            }>;\r\n            items: Array<{\r\n                x: number;\r\n                y: number;\r\n                width: number;\r\n                height: number;\r\n                id: number;\r\n            }>;\r\n        }>;\r\n        width: number;\r\n        height: number;\r\n    },\r\n}\r\n\r\n//Default event listener\r\nself.addEventListener(\"message\", ({ data: { data, type } }) => {\r\n    self.dispatchEvent(new CustomEvent(type, {\r\n        detail: data\r\n    }));\r\n});\r\n\r\nlet dataSet: DataSet | null = null;\r\nlet algo: Metaheuristique | null = null;\r\n\r\nlet timeout: NodeJS.Timeout | null = null;\r\n\r\nlet interval = 100\r\nlet iterationCount = 1\r\n\r\nlet totalTime = 0;\r\n\r\nDedicatedWorkerGlobalScope.prototype.emit = function (...data) {\r\n    this.postMessage({ type: data[0], data: data[1] });\r\n}\r\n\r\nconst metaheuristiques = {\r\n    \"Recuit simulé\": RecuitSimule,\r\n    \"Tabou\": Tabou,\r\n    \"Genetique\": Genetique,\r\n    \"Hill Climbing\": HillClimbing,\r\n}\r\n\r\nself.addEventListener(\"init\", ({ detail: { rawDataSet, metaheuristique, config, speed } }) => {\r\n    dataSet = new DataSet(rawDataSet)\r\n    algo = new metaheuristiques[metaheuristique](dataSet, config);\r\n    interval = speed.interval;\r\n    iterationCount = speed.iterationCount;\r\n    self.emit(\"config\", algo.config);\r\n});\r\n\r\nself.addEventListener(\"config\", ({ detail }) => {\r\n    if (!algo) throw new Error('metaheuristique is not initialized');\r\n    algo.config = detail;\r\n});\r\n\r\nself.addEventListener(\"start\", () => {\r\n    if (!dataSet || !algo) throw new Error('dataSet or metaheuristique is not initialized');\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n    let _dataSet = dataSet;\r\n    const _algo = algo;\r\n    run(_dataSet, _algo);\r\n});\r\n\r\n\r\nself.addEventListener(\"pause\", () => {\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n});\r\n\r\nself.addEventListener(\"stop\", () => {\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n    self.emit(\"done\");\r\n    self.close();\r\n});\r\n\r\nself.addEventListener(\"step\", () => {\r\n    if (!dataSet || !algo) throw new Error('dataSet or metaheuristique is not initialized');\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n    const result = runOnce(dataSet, algo)\r\n    if (!result) return;\r\n    self.emit(\"stats\", [result.stats]);\r\n    self.emit(\"solution\", [result.solution])\r\n});\r\n\r\nself.addEventListener(\"convergence\", () => {\r\n    if (!dataSet || !algo) throw new Error('dataSet or metaheuristique is not initialized');\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n    const stats: MetaheuristiqueStatistic[] = [];\r\n    const solutions: BinPackingSvgs[] = [];\r\n    while (true) {\r\n        const result = runOnce(dataSet, algo)\r\n        if (!result) break;\r\n        stats.push(result.stats);\r\n        solutions.push(result.solution);\r\n    }\r\n    self.emit(\"stats\", stats);\r\n    self.emit(\"solution\", solutions)\r\n    self.emit(\"done\");\r\n    self.close();\r\n});\r\n\r\nself.addEventListener(\"speed\", ({ detail }) => {\r\n    interval = detail.interval;\r\n    iterationCount = detail.iterationCount;\r\n});\r\n\r\nfunction run(dataSet: DataSet, metaheuristique: Metaheuristique) {\r\n    const stats: MetaheuristiqueStatistic[] = [];\r\n    const solutions: BinPackingSvgs[] = [];\r\n    let isFinnished = false;\r\n    for (let i = 0; i < iterationCount; i++) {\r\n        const result = runOnce(dataSet, metaheuristique)\r\n        if (!result) {\r\n            isFinnished = true;\r\n            break;\r\n        }\r\n        stats.push(result.stats);\r\n        solutions.push(result.solution);\r\n    }\r\n    if (solutions.length && stats.length) {\r\n        self.emit(\"stats\", stats);\r\n        self.emit(\"solution\", solutions)\r\n    }\r\n    if (!isFinnished) {\r\n        timeout = setTimeout(() => {\r\n            run(dataSet, metaheuristique);\r\n        }, interval);\r\n    }\r\n    else {\r\n        self.emit(\"done\");\r\n        self.close();\r\n    }\r\n}\r\n\r\n\r\nfunction runOnce(dataSet: DataSet, metaheuristique: Metaheuristique) {\r\n    const start = self.performance.now();\r\n    const { value, done } = metaheuristique.run();\r\n    const end = self.performance.now();\r\n    const time = end - start;\r\n    totalTime += time;\r\n    if (done) return;\r\n    const { solution, iteration } = value;\r\n    const currentSolutions = solution.map((solution, y) => {\r\n        const binPaking: MetaheuristiqueState[\"binPakings\"][\"binPacking\"][0] = {\r\n            bins: [],\r\n            items: [],\r\n        };\r\n\r\n\r\n        solution.bins.forEach((bin, i) => {\r\n            let result = draw(\r\n                bin,\r\n                i * (dataSet.binWidth) * 1.1,\r\n                y * (dataSet.binWidth) * 1.1,\r\n                i.toString()\r\n            );\r\n            binPaking.bins.push(...result.bins);\r\n            binPaking.items.push(...result.items);\r\n        });\r\n        return {\r\n            bins: binPaking.bins.sort((a, b) => parseInt(a.id) - parseInt(b.id)),\r\n            items: binPaking.items.sort((a, b) => a.id - b.id)\r\n        };\r\n    });\r\n\r\n    return {\r\n        solution: {\r\n            binPacking: currentSolutions,\r\n            width: currentSolutions.reduce((acc, { bins }) => Math.max(bins.reduce((acc, bin) => Math.max(acc, bin.x + bin.width), 0), acc), 0),\r\n            height: (currentSolutions.length - 1) * dataSet.binHeight * 1.1 + dataSet.binHeight\r\n        },\r\n        stats: {\r\n            fitness: solution[0].fitness,\r\n            iteration,\r\n            numberOfBin: solution[0].bins.length,\r\n            time: totalTime\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction draw(bin: Bin, d: number, y: number, id: string) {\r\n    const binPaking: MetaheuristiqueState[\"binPakings\"][\"binPacking\"][0] = {\r\n        bins: [],\r\n        items: [],\r\n    };\r\n\r\n    binPaking.bins.push({\r\n        x: bin.x + d,\r\n        y: bin.y + y,\r\n        width: bin.width,\r\n        height: bin.height,\r\n        id,\r\n    });\r\n    if (bin.item) {\r\n        binPaking.items.push({\r\n            x: bin.x + d,\r\n            y: bin.y + y,\r\n            width: bin.item.width,\r\n            height: bin.item.height,\r\n            id: bin.item.id,\r\n        });\r\n    }\r\n\r\n    bin.subBins.forEach((item, i) => {\r\n        let result = draw(item, d, y, id + \"-\" + i);\r\n        binPaking.bins.push(...result.bins);\r\n        binPaking.items.push(...result.items);\r\n    });\r\n\r\n    return binPaking;\r\n}\r\n\r\nexport { };\r\n"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","rectangle_1","require","Item","default","constructor","id","width","height","super","rotate","copy","Bin","x","arguments","length","undefined","y","_item","_items","_fitness","bottomSubBin","rightSubBin","divided","addItem","item","result","_this$_item","area","newHeight","Math","max","getDeepestY","bin","_bin$item","subBin","subBins","newBottomBin","items","newRightBin","push","fitness","filter","_this$_item2","_this$bottomSubBin","_this$rightSubBin","isEmtpy","bin_1","binWidth","binHeight","bins","forEach","at","reduce","acc","pow","Item_1","binPacking_1","content","name","comment","nbItems","stringItems","replace","split","map","Number","Error","minBinAmount","ceil","createBinPacking","createRandomSolution","sort","random","BinPacking","DataSet","HillClimbing","RecuitSimule","Genetique","Tabou","Metaheuristique","metaheuristique_1","tabou_1","genetique_1","recuitSimule_1","hillClimbing_1","dataSet_1","dataSet","config","convergence","iteration","populationSize","generation","newGeneration","generatePopulation","computeFitness","individual","a","b","fit","crossover","i","parent1","parent2","items1","items2","index1","floor","index2","start","min","delta","removed","slice","filtered","find","_ref","splice","mutate","index","itemToMove","initGenerator","solution","getPopulation","bestSolution","bestFitness","neighbor","getBestNeighbors","j","neighborItems","lastFitness","_config","generator","convergenceGenerator","run","next","convergenceCounter","return","Symbol","iterator","numberOfBins","iterationByTemperature","temperatureDecrease","temperature","currentFitness","currentSolution","totalIteration","getRandomNeighboor","exp","tabouSize","tabou","src","dest","shift","some","tabu","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","call","n","getter","d","definition","key","o","enumerable","get","obj","prop","prototype","hasOwnProperty","self","addEventListener","data","type","dispatchEvent","CustomEvent","detail","algo","timeout","interval","iterationCount","totalTime","DedicatedWorkerGlobalScope","emit","postMessage","metaheuristiques","metaheuristique","stats","solutions","isFinnished","runOnce","close","setTimeout","performance","now","done","end","currentSolutions","binPaking","draw","toString","parseInt","binPacking","_ref5","numberOfBin","time","_ref2","rawDataSet","speed","_ref3","clearTimeout","_ref4"],"sourceRoot":""}